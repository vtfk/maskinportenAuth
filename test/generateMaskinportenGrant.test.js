const { generateMaskinportenGrant } = require('../lib/maskinporten-auth')
const jwt = require('jsonwebtoken')

// Sample certificate fetched from https://fm4dd.com/openssl/certexamples.shtm
const pemcert = 'LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUMyakNDQWtNQ0FnMzhNQTBHQ1NxR1NJYjNEUUVCQlFVQU1JR2JNUXN3Q1FZRFZRUUdFd0pLVURFT01Bd0cKQTFVRUNCTUZWRzlyZVc4eEVEQU9CZ05WQkFjVEIwTm9kVzh0YTNVeEVUQVBCZ05WQkFvVENFWnlZVzVyTkVSRQpNUmd3RmdZRFZRUUxFdzlYWldKRFpYSjBJRk4xY0hCdmNuUXhHREFXQmdOVkJBTVREMFp5WVc1ck5FUkVJRmRsCllpQkRRVEVqTUNFR0NTcUdTSWIzRFFFSkFSWVVjM1Z3Y0c5eWRFQm1jbUZ1YXpSa1pDNWpiMjB3SGhjTk1USXcKT0RJeU1EVXlOelF4V2hjTk1UY3dPREl4TURVeU56UXhXakJLTVFzd0NRWURWUVFHRXdKS1VERU9NQXdHQTFVRQpDQXdGVkc5cmVXOHhFVEFQQmdOVkJBb01DRVp5WVc1ck5FUkVNUmd3RmdZRFZRUUREQTkzZDNjdVpYaGhiWEJzClpTNWpiMjB3Z2dFaU1BMEdDU3FHU0liM0RRRUJBUVVBQTRJQkR3QXdnZ0VLQW9JQkFRQzB6OUZlTXluc0M4K3UKZHZYK0xjaVp4bmg1dVJqNEM5UzZ0TmVlQWxJR0NmUVlrMHpVY05GQ29Da1Rrbk5RZC9ZRWlhd0RMTmJ4QnF1dApiTURaMWFhcnlzMWEwbFltVWVWTENJcXZ6QmtQSlRTUXNDb3BRUTlWOFd1VDI1Mnp6TnpzNjhkVkdOZENKZDVKCk5SUXlrcHdleG1ualBQdjBtdmo3aThYZ0czNzlUeVc2UCtXV1Y1b2tlVWtYSjllSlMyb3VEWWRSMlNNOUJvVlcKK0ZneER1NkJtWGhvelc1RWZzbmFqRnA3SEw4a1FDbEkwUU9jNzl5dUtsMzQ5MnJINmJ6RnNGbjJsZndXeTlpYwo3Y1A4RXBDVGVGcDF0RmFEK3Z4QmhQWmtlVFExSEt4NmhRNXplSElCNXlTSkpaN2FmMlc4cjRlVEdZemJkUlcyCjREREhDUGhaQWdNQkFBRXdEUVlKS29aSWh2Y05BUUVGQlFBRGdZRUFRTXYrQkZ2R2RNVnprUWFRMy8rMm5vVnoKL3VBS2J6cEVMOHhUY3hZeVAzbGtPZWg0Rm94aVNXcXk1cEdGQUxkUE9Ob0R1WUZwTGhqSlNaYUV3dXZqSS9UcgpyR2hMVjFwUkc5ZnJ3REZzaHFEMlZhajRFTkJDQmg2VXBlQm9wNSsyODV6UTRTSTdxNFU5b1NlYlVESml1T3g2Cit0WjlLeW5tcmJKcFRTaTArQk09Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K'
const pemkey = 'LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcEFJQkFBS0NBUUVBdE0vUlhqTXA3QXZQcm5iMS9pM0ltY1o0ZWJrWStBdlV1clRYbmdKU0JnbjBHSk5NCjFIRFJRcUFwRTVKelVIZjJCSW1zQXl6VzhRYXJyV3pBMmRXbXE4ck5XdEpXSmxIbFN3aUtyOHdaRHlVMGtMQXEKS1VFUFZmRnJrOXVkczh6YzdPdkhWUmpYUWlYZVNUVVVNcEtjSHNacDR6ejc5SnI0KzR2RjRCdCsvVThsdWovbApsbGVhSkhsSkZ5ZlhpVXRxTGcySFVka2pQUWFGVnZoWU1RN3VnWmw0YU0xdVJIN0oyb3hhZXh5L0pFQXBTTkVECm5PL2NyaXBkK1BkcXgrbTh4YkJaOXBYOEZzdlluTzNEL0JLUWszaGFkYlJXZy9yOFFZVDJaSGswTlJ5c2VvVU8KYzNoeUFlY2tpU1dlMm45bHZLK0hreG1NMjNVVnR1QXd4d2o0V1FJREFRQUJBb0lCQUU3NkgwZDRMYTJQRXkzdgpoRTk4REEwdkpkeDFQelRKWmlnUGFjYjQySDhPeGZJZUZRY09LRGxqMzgxT3dOTzdNbGlWRWU5cEhKRzNDakg4Ck9OaHRmQm01d2EwVUJ0RkNJRmQvNmFRVUVEWVBXRUNDMGtlbXhWNFN6NXlMNXZ4c1ZXdWZLVGhBVzNYbk9JcmQKaG03NG52ektTZUlaOXl2R3JVNmlwTkhZOE1VUG0wRFFWclZZRTVNaUtqS1ZFeFE0dVJBb2xWMmhsbWVRRGxTdAprODVTMFRVT1dPMUV2Slpoc1ZWczdkQmpqWTEwaElqdjNnWlBBTzhDTjg1SnpNZWFOYm1XdjRSUWowQjk5N2luCnJxbE9hNXFZWXQ4MHRBV080aG1QUktDcnY2UGdUaHo4QzBDZDhBZ3dOenZRRDJkNEpwbXh4VHpCVDYvNWxSbmcKSGhqL3dRRUNnWUVBMmp4QzBhNGxHbXAxcTJhWUUxWnlpcTBVcWp4QTkycHdGWUpnMzgwME1Ma2Y5NkErZE9oZAp3REFjNWFBS044dlFWNWczM3ZLaTUrcElIV1VDc2toVFM4L1BQR3JmZXFJdnRwaENqNmI3TEtvc0JPaGR6clJECk9zcitBei9TaVIyaDVsMmxyL3Y3SThJODZSVFk3TUJrNFFjUmI2MDFrU2FnV0xETlZ6U1NkaEVDZ1lFQTFCbTAKMHNCeXFrUW1Gb1VOUmp3bVNoUGZKZVZMVENyMUc0Y2xsamw2TXFIbUd5UkRIeHRjcDErQ1hseUpKZW1MUVkyQQpxck03L1Q0eDJ0YTZNRTJXZ0R5ZEZlOU04b1UzQmJlZk5Zb3ZTNllub3lCcXhDeDd5WjF2TzBKbzQwclpJOEJpCktvQ2k2ZTBIdWdnNHh5UFJ6OVRUTkxtci95RUMxcVFlc01oTTlja0NnWUVBcnNUN3JmZ01kcTh6Tk9TZ2ZUd0oKMXN6dGM3ZDFQNjdadkNBQmZMbFZSbis2L2hBeWRHVnlUdXM0K1J2Rmt4R0I4K1JQT2hpT0piUVZ0SlNrS0NxTApxbmJ0dTdESzcrYmExeHZ3a2lKam5FMWJtMEtMZlhJWE5RcERpazZlU0hpV28ybnp1by9OZThHZURmdElEYkcyCkdCQVZBcDV2KzZJM1gwK1g0bktUcUVFQ2dZRUF3VDRDajVtalh4bmtFZFI3ZWFoSHdtcEVmMFJmekMrL1RhdGUKUlhac3JVRHdZMzR3WVdFT2s3ZmpFWklCcXJjVGwxQVRFSE5vanB4aDA5NmJtSEs0VW5Ibk5Scm40bllZNFc2Zwo4YWpLMm9PeHpXQTFwakpaUGlIZ08vK1BqTGFmQzRHMmJyN3dyMnkwQTN5R0xubW1LVkxnYzBOUFA0MldCblZWCk9QL2xqbkVDZ1lBQmxEZEpDQWVoRE5TdjRtZEV6WTViZkQrVkJGZDJRc2dFMWhZaG1VWVlSTmxnSWZJTDlZOGUKQ2R1cVhGTE5aL0xIZG10WWVtYmdVcXJNaUpUVXFjYlNySnQyNmtCUXgwYXozTEFWK0oycDY4UFE4NUtSOVpQeQpOMWpFblJxcEF3RWR3N1MrOGwweVZ5YU5rbTY2ZVJJODBwK3czQXhOYlM5aEovN1VsVjNsR0E9PQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQo='

// Sample pfx downloaded from https://asecuritysite.com/encryption/digitalcert2
const pfxCert = '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'
const pfxPassphrase = 'orange'

const testPfxOptions = {
  pfxcert: pfxCert,
  privateKeyPassphrase: pfxPassphrase,
  audience: 'hello.no',
  issuer: 'clientID',
  scope: 'prefix:scope'
}

const testPemOptions = {
  pemcert,
  pemprivateKey: pemkey,
  audience: 'hello.no',
  issuer: 'clientID',
  scope: 'prefix:scope'
}
const invalidOptions = {
  pemcert,
  pemprivateKey: pemkey,
  issuer: 'clientID',
  scope: 'prefix:scope'
}
const requiredParameters = ['pemcert', 'pemprivateKey', 'audience', 'issuer']

test('Grant is succesfully created, when valid options are provided for PEM', () => {
  const grant = generateMaskinportenGrant(testPemOptions)
  const decoded = jwt.decode(grant)
  expect(typeof decoded).toBe('object')
  expect(decoded.scope).toBe(testPemOptions.scope)
  expect(decoded.iss).toBe(testPemOptions.issuer)
  expect(decoded.aud).toBe(testPemOptions.audience)
})

test('Grant is succesfully created, when valid options are provided for pfx', () => {
  const grant = generateMaskinportenGrant(testPfxOptions)
  const decoded = jwt.decode(grant)
  expect(typeof decoded).toBe('object')
  expect(decoded.scope).toBe(testPfxOptions.scope)
  expect(decoded.iss).toBe(testPfxOptions.issuer)
  expect(decoded.aud).toBe(testPfxOptions.audience)
})

test('Throws error when missing required parameters', () => {
  const fn = () => {
    generateMaskinportenGrant(invalidOptions)
  }
  expect(fn).toThrow('Missing required input')
})
describe('Throws error when missing required parameter:', () => {
  requiredParameters.forEach(parameter => {
    test(parameter, () => {
      const options = {
        pemcert: 'tullball',
        pemprivateKey: 12345,
        audience: 'hello.no',
        issuer: 'clientID',
        scope: 'prefix:scope'
      }
      delete options[parameter]
      const fn = () => {
        generateMaskinportenGrant(options)
      }
      expect(fn).toThrow('Missing required input')
    })
  })
})
